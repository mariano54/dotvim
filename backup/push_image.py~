from subprocess import call
import httplib, urllib
import argparse
import os, json

host = "sorgente.aka"
registry_port = "5000"
server_port = "5001"

def docker_inspect(target):
    tmp_storage = open(os.getcwd() + '/tmp_storage.txt', 'w')
    call(['sudo', 'docker', 'inspect', target], stdout=tmp_storage)
    tmp_storage.close()
    f = open(os.getcwd() + '/tmp_storage.txt')
    image_inspectdata = json.loads(f.read())
    f.close()
    return image_inspectdata


def main():
	parser = argparse.ArgumentParser()
	parser.add_argument("image", help="username/imagename:tag of the target image")
	parser.add_argument("-arch", help="Target architecture for this build")
	parser.add_argument("-k", action="append", help="Keyword. Add as many keywords (tags) for this image. Examples: completed, ppc, sources, develroot, buggy, release")
	args = parser.parse_args()
	if args.arch is None: args.arch ="x86"

	if host + ":" + registry_port not in args.image:
		# Tag the image with the host and port
		print "Tagging image"
		call(['sudo', 'docker', 'tag', args.image, host + ':' + registry_port + '/' + args.image])

	sha = docker_inspect(host + ':' + registry_port + '/' + args.image)[0]["Id"]
	keywords = "" if not args.k else "@".join(args.k)

	# Push the specified image to the docker registry
	print "Pushing image:"
	call(['sudo', 'docker', 'push', host + ':' + registry_port + '/' + args.image])
	print "Pushed image"

	if host + ":" + registry_port not in args.image:
		call(['sudo', 'docker', 'rmi', host + ':' + registry_port + '/' + args.image])


	# Create an HTTP request with additional data, to send to server
	# This can be modified, along with the cli arguments, to add more metadata
	params = urllib.urlencode({ '@image': args.image,'@arch': args.arch, 
             '@keywords': keywords, '@sha' : sha })
	headers = {"Content-type": "application/x-www-form-urlencoded",
           "Accept": "text/plain"}
	conn = httplib.HTTPConnection(host + ":" + server_port)
	conn.request("POST", "/submit", params, headers)
	response = conn.getresponse()
	print response.status, response.reason
	conn.close()
	print "Done"


if __name__ == "__main__":
	main()

