#!/usr/bin/env python
from subprocess import call
import httplib, urllib
import argparse
import os, json

host = "sorgente.aka"
registry_port = "5000"
server_port = "5001"
debug_enabled = False

def debug(string):
    if not debug_enabled: return
    print "DEBUG", string

def _decode_list(data):
    rv = []
    for item in data:
        if isinstance(item, unicode):
            item = item.encode('utf-8')
        elif isinstance(item, list):
            item = _decode_list(item)
        elif isinstance(item, dict):
            item = _decode_dict(item)
        rv.append(item)
    return rv

def _decode_dict(data):
    rv = {}
    for key, value in data.iteritems():
        if isinstance(key, unicode):
            key = key.encode('utf-8')
        if isinstance(value, unicode):
            value = value.encode('utf-8')
        elif isinstance(value, list):
            value = _decode_list(value)
        elif isinstance(value, dict):
            value = _decode_dict(value)
        rv[key] = value
    return rv

def docker_inspect(target):
    tmp_storage = open(os.getcwd() + '/tmp_storage.txt', 'w')
    call(['sudo', 'docker', 'inspect', target], stdout=tmp_storage)
    tmp_storage.close()
    f = open(os.getcwd() + '/tmp_storage.txt')
    image_inspectdata = json.loads(f.read())
    f.close()
    return image_inspectdata

def push(args):
    if args.arch is None: args.arch ="x86"

    if host + ":" + registry_port not in args.image:
		# Tag the image with the host and port
		debug("Tagging image")
		call(['sudo', 'docker', 'tag', args.image, host + ':' + registry_port + '/' + args.image])

    sha = docker_inspect(host + ':' + registry_port + '/' + args.image)[0]["Id"]
    keywords = "" if not args.k else "@".join(args.k)

	# Push the specified image to the docker registry
    debug("Pushing image:")
    call(['sudo', 'docker', 'push', host + ':' + registry_port + '/' + args.image])
    debug("Pushed image")

    if host + ":" + registry_port not in args.image:
		call(['sudo', 'docker', 'rmi', host + ':' + registry_port + '/' + args.image])


	# Create an HTTP request with additional data, to send to server
	# This can be modified, along with the cli arguments, to add more metadata
    params = urllib.urlencode({ '@image': args.image,'@arch': args.arch, 
             '@keywords': keywords, '@sha' : sha })
    headers = {"Content-type": "application/x-www-form-urlencoded",
           "Accept": "text/plain"}
    conn = httplib.HTTPConnection(host + ":" + server_port)
    conn.request("POST", "/submit", params, headers)
    response = conn.getresponse()
    debug(str(response.status) + " " + response.reason)
    conn.close()
    debug("Done")

def pull(args):
    pull_target = args.image
    if host + ":" + registry_port not in pull_target:
    
        pull_target +=  host + ":" + registry_port 
    # Pulling the specified image from docker registry
    debug("Pulling image:")
    call(['sudo', 'docker', 'pull', pull_target])
    debug("Pulled image")


def ls(args):
    headers = {"Content-type": "application/x-www-form-urlencoded",
           "Accept": "text/json"}
    conn = httplib.HTTPConnection(host + ":" + server_port)
    conn.request("GET", "/json?input=")
    response = conn.getresponse()
    debug(str(response.status) + " " + response.reason)
    conn.close() 
    data = json.loads(response.read())
    for element in data:
        print element['user'] + "/" + element['name'] + ':' + element['version']

def search(args):
    headers = {"Content-type": "application/x-www-form-urlencoded",
           "Accept": "text/json"}
    conn = httplib.HTTPConnection(host + ":" + server_port)
    conn.request("GET", "/json?input="+args.input)
    response = conn.getresponse()
    debug(str(response.status) + " " + response.reason)
    conn.close() 
    jsondata = json.loads(response.read(), object_hook=_decode_dict)
    print json.dumps(jsondata, indent=4)

def info(args):
    print "getting info"

def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='interact with the almach image library')


    parser_push = subparsers.add_parser('push', help="Push a docker images")
    parser_push.add_argument("image", help="username/imagename:tag of the target image")
    parser_push.add_argument("-arch", help="Target architecture for this build")
    parser_push.add_argument("-k", action="append", help="Keyword. Add as many keywords (tags) for this image. Examples: completed, ppc, sources, develroot, buggy, release")
    parser_push.set_defaults(func=push)


    parser_pull = subparsers.add_parser('pull', help="Pull a docker image")
    parser_pull.add_argument("image", help="username/imagename:tag of the target image")
    parser_pull.set_defaults(func=pull)



    parser_ls = subparsers.add_parser('ls', help="List all the images")
    parser_ls.set_defaults(func=ls)

    parser_search = subparsers.add_parser('search', help="Search for images")
    parser_search.add_argument("input", help="Search query (user:beckerd and version:latest or user sorgente)")
    parser_search.set_defaults(func=search)
    
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
	main()

